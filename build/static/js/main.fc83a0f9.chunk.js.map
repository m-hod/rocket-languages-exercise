{"version":3,"sources":["CatFact.jsx","AllCatFacts.jsx","SearchForm.jsx","Header.jsx","App.jsx","index.js"],"names":["CatFact","upvotes","text","useState","isVisible","setIsVisible","onClick","React","require","AllCatFacts","list","sortedList","sort","a","b","map","catFact","i","key","SearchForm","onClose","onKeyDown","setCatFacts","unfilteredCatFacts","searchEntry","setSearchEntry","style","border","type","value","onChange","event","target","inputEvtHandler","window","removeEventListener","filteredList","filter","search","Header","className","App","searchFormIsOpen","setSearchFormIsOpen","catFacts","loading","setLoading","setUnfilteredCatFacts","keyCode","useEffect","addEventListener","fetch","then","response","json","all","render","document","getElementById"],"mappings":"wIAyBeA,EArBC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAAW,EACDC,oBAAS,GADR,mBAC5BC,EAD4B,KACjBC,EADiB,KAOnC,OACI,4BACKD,GACG,kCAAQH,EAAR,cAA4BC,GAEhC,4BAAQI,QAAS,WARrBD,GAAcD,KAUDA,EAAa,IAAM,OChBlCG,EAAQC,EAAQ,GA0BPC,EApBK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEfC,EAAa,YAAID,GAAME,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEZ,QAAUa,EAAEb,WAE3D,OACE,0BAEIU,EAAWI,KAAI,SAACC,EAASC,GAAV,OACb,gBAAC,EAAD,CACEC,IAAKD,EACLhB,QAASe,EAAQf,QACjBC,KAAMc,EAAQd,YC6BXiB,EAxCI,SAAC,GAAmE,IAAjEC,EAAgE,EAAhEA,QAASC,EAAuD,EAAvDA,UAAWX,EAA4C,EAA5CA,KAAMY,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,mBAAyB,EAC5CpB,mBAAS,IADmC,mBAC3EqB,EAD2E,KAC9DC,EAD8D,KA6BlF,OACI,yBAAKC,MAAO,CAACC,OAAQ,mBACjB,2CACA,2BAAOC,KAAK,OAAOC,MAAOL,EAAaM,SAAU,SAACC,GAAD,OA7BjC,SAACA,GACrBN,EAAeM,EAAMC,OAAOH,OA4BqCI,CAAgBF,IAASzB,QAAS,WAvBnG4B,OAAOC,oBAAoB,UAAWd,MAwBlC,4BAAQf,QAAS,kBAhBV,WACX,IAAM8B,EAAe1B,EAAK2B,QAAO,SAACrB,GAE9B,OAAiB,IADDA,EAAQd,KAAKoC,OAAOd,MAOxCF,EAAYc,GAOgBE,KAAxB,UACA,4BAAQhC,QAAS,kBArBrBmB,EAAe,SACfH,EAAYC,KAoBR,SACA,4BAAQjB,QAAS,kBAAOc,MAAxB,WChCGmB,G,KARA,WACX,OACI,yBAAKC,UAAU,UAAf,eCDFjC,EAAQC,EAAQ,GAyFPiC,EAjFH,WAAO,IAAD,EAC8BlC,EAAMJ,UAAS,GAD7C,mBACXuC,EADW,KACOC,EADP,OAEcpC,EAAMJ,SAAS,MAF7B,mBAEXyC,EAFW,KAEDtB,EAFC,OAGYf,EAAMJ,UAAS,GAH3B,mBAGX0C,EAHW,KAGFC,EAHE,OAKkCvC,EAAMJ,SAAS,MALjD,mBAKXoB,EALW,KAKSwB,EALT,KAqBhB,SAAS1B,EAAWU,GAEI,KAAlBA,EAAMiB,SACRL,GAAqBD,GAkBzB,OAnCAnC,EAAM0C,WAAU,WAId,OAFAf,OAAOgB,iBAAiB,UAAW7B,GAE5B,WACLa,OAAOC,oBAAoB,UAAWd,OAgBtCwB,GAGFM,MApCU,oDAqCPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAASC,GACb/B,EAAY+B,EAASE,KACrBR,EAAsBM,EAASE,QAEhCH,MAAK,WACJN,GAAW,MAIbD,EAEA,gCACE,gBAAC,EAAD,MACA,iEACA,0CACA,4CAGKH,EAEP,gCACE,gBAAC,EAAD,MACA,kEACCA,GACG,gBAAC,EAAD,CACItB,QA1Cd,WACEuB,GAAoB,GACpBrB,EAAYC,IAyCAF,UAAWA,EACXX,KAAMkC,EACNtB,YAAaA,EACbC,mBAAoBA,IAG5B,gBAAC,EAAD,CAAab,KAAMkC,IACnB,4CAKF,gCACE,gBAAC,EAAD,MACA,kEACA,gBAAC,EAAD,CAAalC,KAAMkC,IACnB,6CCrFFrC,EAAQC,EAAQ,GACLA,EAAQ,GA0BhBgD,OACP,gBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.fc83a0f9.chunk.js","sourcesContent":["import React, {\r\n    useState\r\n} from 'react';\r\n\r\nconst CatFact = ({ upvotes, text }) => {\r\n    const [isVisible, setIsVisible] = useState(true)\r\n\r\n    const hide = () => {\r\n        setIsVisible(!isVisible)\r\n    }\r\n\r\n    return (\r\n        <li>\r\n            {isVisible && \r\n                <span>[{upvotes} upvotes]: {text}</span>\r\n            }\r\n            <button onClick={() => hide()}>\r\n                {\r\n                    (isVisible) ? '-' : '+'\r\n                }\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default CatFact;","import CatFact from './CatFact'\r\n\r\nconst React = require('react')\r\n\r\n// Requirements:\r\n// - display an unordered list, displaying: \"[x upvotes] {text}\" per line\r\n// - A button on each line that can \"hide\" the line\r\n// props: { list: [{ _id: string, text: string, upvotes: number }] }\r\nconst AllCatFacts = ({ list }) => {\r\n  // Expected output [ { _id: \"\", upvotes: 1, text: \"\" }, { _id: \"\", upvotes: 2, text: \"\" }, { _id: \"\", upvotes 3, text: \"\" } ]\r\n  const sortedList = [...list].sort((a, b) => (a.upvotes - b.upvotes))\r\n\r\n  return (\r\n    <ul>\r\n      {\r\n        sortedList.map((catFact, i) => (\r\n          <CatFact \r\n            key={i}\r\n            upvotes={catFact.upvotes}\r\n            text={catFact.text}\r\n          />\r\n        ))\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\n\r\nexport default AllCatFacts","import React, {\r\n    useState\r\n} from 'react';\r\n\r\n// Requirements:\r\n// - mount/unmount when the user taps \"s\".\r\n// - unmount when the user presses the \"Close\" button\r\n// props: {onClose: Function}\r\nconst SearchForm = ({ onClose, onKeyDown, list, setCatFacts, unfilteredCatFacts }) => {\r\n    const [searchEntry, setSearchEntry] = useState('')\r\n\r\n    const inputEvtHandler = (event) => {\r\n        setSearchEntry(event.target.value)\r\n    }\r\n\r\n    //change this to remove event handler when input is in focus, and add it back when it goes out of focus\r\n    const inputClickHandler = () => {\r\n        window.removeEventListener(\"keydown\", onKeyDown)\r\n    }\r\n\r\n    const onClear = () => {\r\n        setSearchEntry('')\r\n        setCatFacts(unfilteredCatFacts)\r\n    }\r\n\r\n    const search = () => {\r\n        const filteredList = list.filter((catFact) => {\r\n            const matcher = catFact.text.search(searchEntry)\r\n            if (matcher !== -1) {\r\n                return true\r\n            } else {\r\n                return false\r\n            }\r\n        })\r\n        setCatFacts(filteredList)\r\n    }\r\n\r\n    return (\r\n        <div style={{border: \"2px dashed red\"}}>\r\n            <h2>Search Form</h2>\r\n            <input type=\"text\" value={searchEntry} onChange={(event) => (inputEvtHandler(event))} onClick={() => (inputClickHandler())} />\r\n            <button onClick={() => (search())}>Search</button>\r\n            <button onClick={() => (onClear())}>Clear</button>\r\n            <button onClick={() => (onClose())}>Close</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchForm","import React from 'react';\r\nimport './style.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            CAT FACTS\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","import AllCatFacts from './AllCatFacts'\r\nimport SearchForm from './SearchForm'\r\nimport Header from './Header'\r\n\r\nconst React = require('react')\r\n\r\n// Returns a list of \"cat facts\" { all: [ { _id: string, upvotes: number, text: string } ] }\r\nvar API_URL = \"https://www.mocky.io/v2/5e1e7dfb31000068001892e8\";\r\n/**\r\n* Entry point for our application\r\n*/\r\n\r\nconst App = () => {\r\n  var [searchFormIsOpen, setSearchFormIsOpen] = React.useState(false);  \r\n  var [catFacts, setCatFacts] = React.useState(null);\r\n  var [loading, setLoading] = React.useState(true);\r\n  //placeholder state to reset catFacts to normal after search is closed\r\n  var [unfilteredCatFacts, setUnfilteredCatFacts] = React.useState(null)\r\n\r\n  React.useEffect(function onMount() {\r\n    // When component mounts, listen for keydown events\r\n    window.addEventListener(\"keydown\", onKeyDown)\r\n    // Unmount the event listener when the component unmounts\r\n    return function cleanup () {\r\n      window.removeEventListener(\"keydown\", onKeyDown)\r\n    }\r\n  });\r\n\r\n  function closeSearchForm() {\r\n    setSearchFormIsOpen(false)\r\n    setCatFacts(unfilteredCatFacts)\r\n  }\r\n\r\n  function onKeyDown (event) {\r\n    // Toggle search form visibility when the user taps \"s\" anywhere on the window\r\n    if (event.keyCode === 83) {\r\n      setSearchFormIsOpen(!searchFormIsOpen)\r\n      }\r\n   }\r\n\r\n  if (loading) {\r\n    // Fetches all cat facts\r\n    // Expected response: { all: [{ _id: string, text: string, upvotes: number }] }\r\n    fetch(API_URL)\r\n      .then(response => response.json())\r\n      .then(function(response) {\r\n        setCatFacts(response.all);\r\n        setUnfilteredCatFacts(response.all)\r\n      })     \r\n      .then(function() {\r\n        setLoading(false);\r\n      });\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <div>Tap 's' to toggle the search form!</div>\r\n        <span>Loading...</span>\r\n        <footer>Copyright</footer>\r\n      </>\r\n    );\r\n  } else if (searchFormIsOpen) {\r\n    return (\r\n      <>     \r\n        <Header />\r\n        <span>Tap 's' to toggle the search form!</span>\r\n        {searchFormIsOpen && \r\n            <SearchForm \r\n                onClose={closeSearchForm} \r\n                onKeyDown={onKeyDown} \r\n                list={catFacts} \r\n                setCatFacts={setCatFacts}\r\n                unfilteredCatFacts={unfilteredCatFacts}\r\n            />\r\n        }\r\n        <AllCatFacts list={catFacts} />\r\n        <footer>Copyright</footer>\r\n      </>\r\n    )\r\n  } else {\r\n    return (\r\n      <>\r\n        <Header />\r\n        <span>Tap 's' to toggle the search form!</span>\r\n        <AllCatFacts list={catFacts} />\r\n        <footer>Copyright</footer>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import App from './App'\n\nconst React = require(\"react\");\nconst ReactDOM = require('react-dom');\n\n/**\n* Requirements:\n* - When the user taps \"s\" anywhere on the page, it should toggle the visibility of the SearchForm component\n* - The app should fetch a list of \"cat facts\" (once) from the API listed below.\n* - Display \"Loading...\" to indicate that the data is being fetched.\n* - Display a list of \"cat facts\", sorted by the lowest upvotes.\n* - Ability to hide a \"cat fact\" by pressing \"x\" next to a single \"cat fact\".\n*\n* Bonus points (Optional):\n* (these are completely optional so don't feel pressured to complete these)\n* - Instead of hiding, implement the ability to toggle \"[+]/[-]\" on each \"cat fact\".\n* - Implement a search input field and filter the \"cat facts\" by the search input.\n* - A live, working code sample hosted on StackBlitz (or anywhere else you'd prefer).\n* - Use of TypeScript\n*\n* Notes:\n* - Don't worry too much if you can't complete a requirement. We just want to see how you approach problems.\n* - Try to avoid using external libraries unless for a good reason\n* - You're allowed to refactor this whole project to your discretion.\n* - Error handling isn't required\n* - Styling is a nice-to-have but not required\n*/\n\n\nReactDOM.render(\n  <App />, \n  document.getElementById('root')\n);"],"sourceRoot":""}